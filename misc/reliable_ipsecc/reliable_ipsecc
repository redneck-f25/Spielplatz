#!/bin/bash

set -ue

which cygstart &>/dev/null || PATH=/usr/local/bin:/usr/bin:/bin:$PATH

SCRIPTDIR=$( dirname $0 )
SCRIPTNAME=$( basename $0 )
SCRIPTBASENAME="${SCRIPTNAME%.*sh}"

. "${SCRIPTBASENAME}.conf"

connected=

throbber_start() {
    c=-1
    echo -n "[ ] "
    while :; do
        case $(( ++c % 4 )) in
            0) char="/"; c=0;;
            1) char="-";;
            2) char="\\";;
            3) char="|";;
        esac
        echo -ne "\b\b\b${char}] "
        sleep ${1:-0.5}
    done &
    throbber_pid=$!
}

throbber_stop() {
    { kill "${throbber_pid}" && wait "${throbber_pid}" || true; } &>/dev/null
    throbber_pid=
    echo -ne "\b\b\b\b    \b\b\b\b"
}

log_begin() {
    msg="$( date +'%FT%T%z' ): $@"
    echo -ne "${msg} " | tee -a ${LOGFILE}
    throbber_start
}

log_end() {
    throbber_stop
    msg="$@"
    echo -ne "${msg}\r\n" | tee -a ${LOGFILE}
}

connect_and_watch() {
    log_begin "Try to reach ${REMOTE_HOST}"
    failsafe=${WAIT_REMOTE_HOST}
    success=false
    while (( failsafe-- )); do
        if ping -w 2 -n 2 "${REMOTE_HOST}"&>/dev/null; then
            success=true
            break
        fi
        sleep 2
    done
    if [ "${success}" != "true" ]; then
        log_end " [FAILED]"
        return 1
    fi
    log_end "[SUCCEEDED]"
    
    log_begin "Start connection ${VPN_CONNECTION}"
    eval "${IPSECC_COMMAND}" &
    #ipsecc_pid=$( ps | grep -P '\s*\d+\s+'"$!"'(\s+\S+){5}\s+/cygdrive.*ipsecc' | grep -oP '^\s*\d+' )
    {
        ipsecc_pid=$( pstree -p $! | grep -oP '\(\d+\)$' | grep -oP '\d+' )
        ipsecc_winpid=$( cat /proc/${ipsecc_pid}/winpid )
        ipsecc_exe=$( cat /proc/$ipsecc_pid/exename )
    }  2>/dev/null
    eval "${IPSECC_CREDENTIALS_COMMAND}" || abort
    failsafe=${WAIT_CONNECT}
    success=false
    while (( failsafe-- )); do
        if route -4 print | grep -P "^\s*${VPN_NETWORK}\s+${VPN_NETMASK}\D+\d+(\.\d+){3}\s" &>/dev/null; then
            success=true
            break
        fi
        sleep 2
    done
    if [ "${success}" != "true" ]; then
        log_end " [FAILED]"
        return 1
    fi
    log_end "[SUCCEEDED]"
    
    read _ _ _ _ VPN_IP4ADDR _ < <( route print -4 | grep -P '^\s*172.19.0.0\s+255.255.255.0' )
    
    connected=1
    [ "${CONNECT_COMMAND}" ] && ( eval "${CONNECT_COMMAND}" )
    
    log_begin "Wait for ${VPN_HOST} at ${VPN_NETWORK}/${VPN_PREFIXLEN}"
    failsafe=${WAIT_NETWORK}
    success=false
    while (( failsafe-- )); do
        if ping -w 2 -n 2 "${VPN_HOST}" &>/dev/null; then
            success=true
            break
        fi
        sleep 2
    done
    if [ "${success}" != "true" ]; then
        log_end "[FAILED]"
        return 1
    fi
    log_end "[SUCCEEDED]"
    
    log_begin "Watching connection on iface ${VPN_IP4ADDR}"
    failcount=0
    while :; do
        if ping -w 2 -n 2 "${VPN_HOST}" &>/dev/null; then
            failcount=0
        elif (( ++failcount == ${WATCH_MAX_FAILCOUNT} )); then
            log_end "[FAILED]"
            break
        fi
        sleep ${WATCH_DELAY}
    done
    
    connected=
    [ "${DISCONNECT_COMMAND}" ] && ( eval "${DISCONNECT_COMMAND}" )
    
    return 1
}

kill_ipsecc() {
    if [ "$( cat /proc/$ipsecc_pid/exename )" == "${ipsecc_exe}" ]; then
        { kill "${ipsecc_pid}" && wait ${ipsecc_pid} || true; }
        # double kill
        sleep 0.5
        taskkill -f -pid "${ipsecc_winpid}" || true
        ipsecc_pid=
    fi &>/dev/null
}

abort() {
    log_end "[ABORTED]" || true
    if (( connected )) && [ "${DISCONNECT_COMMAND}" ]; then
        ( eval "${DISCONNECT_COMMAND}" )
        disown
    fi
    kill_ipsecc
    exit
}

trap abort INT TERM

while :; do
    connect_and_watch || kill_ipsecc
    log_begin "Wait to reconnect"
    sleep ${RECONNECT_DELAY}
    log_end ""
done
